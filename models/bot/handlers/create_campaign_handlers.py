""" Use python 3.7 """

import logging
from multiprocessing import Process
import os

from telegram.ext import ConversationHandler, MessageHandler, CommandHandler, Filters
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, ParseMode

from settings import MAIN_MANAGER_KEYBOARD
from models.vk.targeting import *
from models.bot.handlers.command_handlers import reload


campaign_settings = {}


def _is_user_known(context, update):
    # –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –∏ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç, —Ç–æ —à–ª–µ—Ç –Ω–∞—Ö—É–π
    user = DB.users.find_one({'user_id': update.effective_user.id})
    if not user:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –ù–∞–ø–∏—à–∏ @vnkl_iam. '
                                      '–ú–æ–∂–µ—Ç –±—ã—Ç—å, –æ–Ω –Ω–∞—Å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç.')
        return False
    # –ê –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç..
    else:
        return True


def _nc_start(update, context):
    logging.info(f'user_{update.effective_user.id} trying to start new campaign')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        cabinets = []
        for cab_name, _ in user['user_cabinets'].items():
            cabinets.append([cab_name])
        for cab_name, _ in user['agency_cabinets'].items():
            cabinets.append([cab_name])
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í—ã–±–µ—Ä–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüëáüèª',
                                 reply_markup=ReplyKeyboardMarkup(cabinets))
        return 'select_cabinet'


def _nc_select_cabinet(update, context):
    logging.info(f'user_{update.effective_user.id} trying to select cabinet')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        # –°–æ–±–∏—Ä–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        cabinets = {}
        for cab_name, cab_info in user['user_cabinets'].items():
            cabinets[cab_name] = {'type': 'user', 'cabinet_id': cab_info['cabinet_id']}
        for cab_name, cab_info in user['agency_cabinets'].items():
            cabinets[cab_name] = {'type': 'agency', 'agency_id': cab_info['agency_id']}

        # –î–æ—Å—Ç–∞–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ—É –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
        cab_name = update.message.text
        cab_info = cabinets[cab_name]
        global temp_agency_name
        temp_agency_name = cab_name

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç - —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
        if cab_info['type'] == 'user':
            campaign_settings[user['user_id']] = {'cabinet_name': cab_name, 'cabinet_id': cab_info['cabinet_id'],
                                                      'client_name': None, 'client_id': None}
            context.bot.send_message(chat_id=user['chat_id'],
                                     text='–ü—Ä–∏—à–ª–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ " / ".\n'
                                          '–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Ç / –ö–∞–ø–∫–∞–Ω',
                                     reply_markup=ReplyKeyboardRemove())
            return 'get_release_name'

        # –ê –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç—Å–∫–∏–π - —Ç–æ —Å–ø–µ—Ä–≤–∞ –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
        elif cab_info['type'] == 'agency':
            campaign_settings[user['user_id']] = {'cabinet_name': cab_name, 'cabinet_id': cab_info['agency_id']}
            clients = []
            for client_name, _ in user['agency_cabinets'][cab_name]['agency_clients'].items():
                clients.append([client_name])
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f'–í—ã–±–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞üëáüèª',
                                     reply_markup=ReplyKeyboardMarkup(clients))
            return 'select_client'


def _nc_select_client(update, context):
    logging.info(f'user_{update.effective_user.id} trying to select client')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        # –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        clients = {}
        for client_name, client_info in user['agency_cabinets'][temp_agency_name]['agency_clients'].items():
            clients[client_name] = client_info['client_id']
        client_name = update.message.text
        client_id = clients[client_name]
        campaign_settings[user['user_id']].update({'client_name': client_name, 'client_id': client_id})
        # –ò –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
        context.bot.send_message(chat_id=user['chat_id'],
                                 text=f'–ü—Ä–∏—à–ª–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ " / ".\n'
                                      f'–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Ç / –ö–∞–ø–∫–∞–Ω',
                                 reply_markup=ReplyKeyboardRemove())
        return 'get_release_name'


def _nc_get_release_name(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set artist and track name')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –±—é–¥–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏
        if update.message.text.find(' / '):
            text = update.message.text
            d = text.find(' / ')
            artist = text[:d]
            track = text[d + 3:]
            campaign_settings[user['user_id']].update({'artist_name': artist, 'track_name': track})
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–ü—Ä–∏—à–ª–∏ —Ü–∏—Ç–∞—Ç—É –∏–∑ —Ç—Ä–µ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–∏–º –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n'
                                          '–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ü–∏—Ç–∞—Ç—É, –ø—Ä–∏—à–ª–∏ –º–∏–Ω—É—Å')
            return 'get_citation'
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        else:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–¢—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –≤–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∫–∞–∫ –ø–æ–ø—Ä–æ—Å–∏–ª–∏')
            return 'get_release_name'


def _nc_get_citation(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set citation')

    if _is_user_known(context, update):
        # –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        user = DB.users.find_one({'user_id': update.effective_user.id})
        citation = update.message.text
        if citation == '-':
            campaign_settings[user['user_id']].update({'citation': None})
        else:
            campaign_settings[user['user_id']].update({'citation': citation})
        # ..–∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã –∞—Ä—Ç–∏—Å—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ü—Ä–∏—à–ª–∏ –±—é–¥–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Ä—É–±–ª—è—Ö –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.\n'
                                      '–ù–∞–ø—Ä–∏–º–µ—Ä: 100500')
        return 'get_campaign_budget'


def _nc_get_campaign_budget(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set campaign budget')

    if _is_user_known(context, update):
        # –î–µ–ª–∞–µ—Ç –±—é–¥–∂–µ—Ç –∏–Ω—Ç–æ–º, –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Ü–∏—Ç–∞—Ç—É
        user = DB.users.find_one({'user_id': update.effective_user.id})
        budget = int(update.message.text)
        campaign_settings[user['user_id']].update({'campaign_budget': budget})
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ü—Ä–∏—à–ª–∏ id –≥—Ä—É–ø–ø—ã, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
        return 'get_artist_group'


def _nc_get_artist_group(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set artist group id')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        artist_group_id = int(update.message.text)
        campaign_settings[user['user_id']].update({'artist_group_id': artist_group_id})
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ü—Ä–∏—à–ª–∏ id —Ñ–µ–π–∫-–≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –ø–ª–µ–π–ª–∏—Å—Ç—ã.'
                                      '–í —ç—Ç—É –≥—Ä—É–ø–ø—É —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω —Ü–µ–ª–µ–≤–æ–π —Ç—Ä–µ–∫.\n'
                                      '–ü—Ä–∏—à–ª–∏ "0", –µ—Å–ª–∏ –≥—Ä—É–ø–ø—É –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
        return 'get_fake_group'


def _nc_get_fake_group(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set fake group id')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        text = int(update.message.text)
        if text == 0:
            campaign_settings[user['user_id']].update({'fake_group_id': None})
        else:
            campaign_settings[user['user_id']].update({'fake_group_id': text})
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ë—É–¥–µ–º —Å—É–∂–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É "–º—É–∑—ã–∫–∞"?',
                                 reply_markup=ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç']], one_time_keyboard=True))
        return 'get_music_interest'


def _nc_get_music_interest(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set music interest filter')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        text = update.message.text
        if not text == '–î–∞' and not text == '–ù–µ—Ç':
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–¢—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ.\n–ë—É–¥–µ–º —Å—É–∂–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É "–º—É–∑—ã–∫–∞"?',
                                     reply_markup=ReplyKeyboardMarkup([['–î–∞', '–ù–µ—Ç']], one_time_keyboard=True))
            return 'get_music_interest'
        else:
            if text == '–î–∞':
                campaign_settings[user['user_id']].update({'music_interest_filter': True})
            elif text == '–ù–µ—Ç':
                campaign_settings[user['user_id']].update({'music_interest_filter': False})
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–Ω–µ —Ñ–∞–π–ª–æ–º!) –æ–±–ª–æ–∂–∫—É –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.'
                                          '–ò–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /skip_cover, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ–º –≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é –æ–±–ª–æ–∂–∫—É.')
            return 'get_cover_img'


def _nc_get_cover_img(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set cover image')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        # –°–∫–∞—á–∏–≤–∞–µ—Ç –æ–±–ª–æ–∂–∫—É
        os.getcwd()
        os.chdir('..')
        os.chdir('..')
        os.makedirs('cover_images', exist_ok=True)
        photo = context.bot.get_file(update.message.photo[-1].file_id)
        path = f'cover_images\{photo.file_id}.jpg'
        photo.download(path)
        full_path = f'{os.getcwd()}\{path}'
        # –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω—É—é
        campaign_settings[user['user_id']].update({'cover_path': full_path})

        # –ü—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        text = _nc_preparation_summary(update)
        keyboard = [['–î–∞, —Å–æ–∑–¥–∞–≤–∞–π –∫–∞–º–ø–∞–Ω–∏—é'], ['–ù–µ—Ç, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞'], ['–ù–µ—Ç, –≤—ã–≤–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é']]
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=text,
                                 parse_mode=ParseMode.HTML,
                                 reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
        return 'get_end_decision'


def _nc_skip_cover_img(update, context):
    logging.info(f'user_{update.effective_user.id} trying to skip cover image')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        # –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω—É—é
        campaign_settings[user['user_id']].update({'cover_path': None})

        # –ü—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        text = _nc_preparation_summary(update)
        keyboard = [['–î–∞, —Å–æ–∑–¥–∞–≤–∞–π –∫–∞–º–ø–∞–Ω–∏—é'], ['–ù–µ—Ç, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞'], ['–ù–µ—Ç, –≤—ã–≤–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é']]
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=text,
                                 parse_mode=ParseMode.HTML,
                                 reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
        return 'get_end_decision'


def _nc_get_end_decision(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set end decision')

    if _is_user_known(context, update):
        user = DB.users.find_one({'user_id': update.effective_user.id})
        text = update.message.text
        camp_settings = campaign_settings[user['user_id']]
        if text == '–î–∞, —Å–æ–∑–¥–∞–≤–∞–π –∫–∞–º–ø–∞–Ω–∏—é':
            add_campaign_setting_to_db(update, campaign_settings)
            campaign_name = f'{camp_settings["artist_name"].upper()} / {camp_settings["track_name"]}'
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f'–ö–∞–º–ø–∞–Ω–∏—è "{campaign_name}" —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. '
                                          f'–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é',
                                     reply_markup=ReplyKeyboardMarkup(MAIN_MANAGER_KEYBOARD))
            return ConversationHandler.END

        elif text == '–ù–µ—Ç, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞':
            cabinets = []
            for cab_name, _ in user['user_cabinets'].items():
                cabinets.append([cab_name])
            for cab_name, _ in user['agency_cabinets'].items():
                cabinets.append([cab_name])
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–í—ã–±–µ—Ä–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüëáüèª',
                                     reply_markup=ReplyKeyboardMarkup(cabinets))
            return 'select_cabinet'

        elif text == '–ù–µ—Ç, –≤—ã–≤–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é':
            context.bot.send_message(chat_id=user['chat_id'],
                                     text='–û–∫–µ–π, —á–µ–º –∑–∞–π–º–µ–º—Å—è?',
                                     reply_markup=ReplyKeyboardMarkup(MAIN_MANAGER_KEYBOARD))
            return ConversationHandler.END

        else:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–¢—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑.')
            return 'get_end_decision'


def _nc_preparation_summary(update):
    user = DB.users.find_one({'user_id': update.effective_user.id})
    text = '–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
    campaign_summary = campaign_settings[user['user_id']]
    for k, v in campaign_summary.items():
        text += f'<b>{k}:</b> {v}\n'
    text += '\n–í—Å–µ –æ–∫, –ø–æ–¥—Ç–≤–µ—Ä–∂–∞–¥–µ–º?'
    return text


def _nc_failback(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set cover image')

    if _is_user_known(context, update):
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–¢—ã –≤–≤–µ–ª –Ω–µ —Ç–æ, —á—Ç–æ —è –ø—Ä–æ—Å–∏–ª. –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑')


# –î–∏–∞–ª–æ–≥ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
new_campaign_handler = ConversationHandler(
    entry_points=[MessageHandler(Filters.regex('^(–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é)$'), _nc_start)],
    states={
        'select_cabinet': [CommandHandler('reload', reload),
                           MessageHandler(Filters.text, _nc_select_cabinet)],
        'select_client': [CommandHandler('reload', reload),
                          MessageHandler(Filters.text, _nc_select_client)],
        'get_release_name': [CommandHandler('reload', reload),
                             MessageHandler(Filters.regex('.+[/].+'), _nc_get_release_name)],
        'get_citation': [CommandHandler('reload', reload),
                         MessageHandler(Filters.text, _nc_get_citation)],
        'get_campaign_budget': [CommandHandler('reload', reload),
                                MessageHandler(Filters.regex('\d+'), _nc_get_campaign_budget)],
        'get_artist_group': [CommandHandler('reload', reload),
                             MessageHandler(Filters.regex('\d+'), _nc_get_artist_group)],
        'get_fake_group': [CommandHandler('reload', reload),
                           MessageHandler(Filters.regex('\d+'), _nc_get_fake_group)],
        'get_music_interest': [CommandHandler('reload', reload),
                               MessageHandler(Filters.text, _nc_get_music_interest)],
        'get_cover_img': [CommandHandler('reload', reload),
                          MessageHandler(Filters.photo, _nc_get_cover_img),
                          CommandHandler('skip_cover', _nc_skip_cover_img)],
        'get_end_decision': [CommandHandler('reload', reload),
                             MessageHandler(Filters.text, _nc_get_end_decision)]
    },
    fallbacks=[CommandHandler('reload', reload),
               MessageHandler(Filters.text, _nc_failback)]
)

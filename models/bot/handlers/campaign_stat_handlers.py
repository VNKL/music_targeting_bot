""" Use python 3.7 """

import logging

from telegram.ext import ConversationHandler, MessageHandler, Filters
from telegram import ReplyKeyboardMarkup, ParseMode

from settings import MAIN_MANAGER_KEYBOARD
from models.vk.targeting import *


camp_names = {}


def _is_user_known(context, update):
    # –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –∏ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç, —Ç–æ —à–ª–µ—Ç –Ω–∞—Ö—É–π
    user = DB.users.find_one({'user_id': update.effective_user.id})
    if not user:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –ù–∞–ø–∏—à–∏ @vnkl_iam. '
                                      '–ú–æ–∂–µ—Ç –±—ã—Ç—å, –æ–Ω –Ω–∞—Å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç.')
        return False
    # –ê –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç..
    else:
        return True


def _cs_select_campaign(update, context):
    logging.info(f'user_{update.effective_user.id} trying to get select campaign')

    if _is_user_known(context, update):
        campaigns = get_campaigns_from_db(update)
        keyboard = [[f'{name} ({v["campaign_status"]})'] for name, v in campaigns.items() if
                                                            v['campaign_status'] != 'created']

        for name, v in campaigns.items():
            camp_names[f'{name} ({v["campaign_status"]})'] = name

        if len(keyboard) != 0:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–í—ã–±–µ—Ä–∏ –∫–∞–º–ø–∞–Ω–∏—éüëáüèª',
                                     reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
            return 'get_camp_stats'
        else:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É',
                                     reply_markup=ReplyKeyboardMarkup(MAIN_MANAGER_KEYBOARD))
            return ConversationHandler.END


def _cs_get_camp_stats(update, context):
    logging.info(f'user_{update.effective_user.id} trying to get campaign stat')

    if _is_user_known(context, update):
        text = update.message.text
        campaigns = get_campaigns_from_db(update)

        if text in list(camp_names.keys()):
            help_text = f'–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É –∫–∞–º–ø–∞–Ω–∏–∏ <b>"{text}"</b>..\n\n' \
                        f'–°—Ç–∞—Ç–∞ –ø—Ä–∏–¥–µ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n' \
                        f'<b>spent</b>: –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±—é–¥–∂–µ—Ç\n' \
                        f'<b>listens</b>: —Å—É–º–º–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ –ø–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n' \
                        f'<b>save</b>: –∫–æ–ª–∏—á–µ—Ç–≤–æ –ª—é–¥–µ–π, –¥–æ–±–∞–≤–∏–≤—à–∏—Ö —Å–µ–±–µ —Ç—Ä–µ–∫ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏\n' \
                        f'<b>listen_rate</b>: –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–ª–∏–∫ –Ω–∞ –ø–ª–µ–π –∏–∑ –æ—Ö–≤–∞—Ç–∞\n' \
                        f'<b>listen_cost</b>: —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –ø–ª–µ–π\n' \
                        f'<b>save_rate</b>: –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–µ–±–µ –∏–∑ –æ—Ö–≤–∞—Ç–∞\n' \
                        f'<b>save_cost</b>: —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ —Å–µ–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=help_text,
                                     parse_mode=ParseMode.HTML)

            campaign = campaigns[camp_names[text]]
            stat = get_campaign_average(update, campaign)
            answer = _answer_for_campaign_stat(text, stat)
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=answer,
                                     parse_mode=ParseMode.HTML,
                                     reply_markup=ReplyKeyboardMarkup(MAIN_MANAGER_KEYBOARD))
            return ConversationHandler.END

        else:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text='–¢—ã –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑')
            return 'get_camp_stats'


def _answer_for_campaign_stat(text, stat):
    answer = f'<b>{text}</b>\n\n'
    for k, v in stat.items():
        answer += f'<b>{k}</b>: {v}\n'
    return answer


def _cs_failback(update, context):
    logging.info(f'user_{update.effective_user.id} trying to set cover image')

    if _is_user_known(context, update):
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–¢—ã –≤–≤–µ–ª –Ω–µ —Ç–æ, —á—Ç–æ —è –ø—Ä–æ—Å–∏–ª. –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑')


# –î–∏–∞–ª–æ–≥ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Å—Ç–∞—Ç—ã –∫–∞–º–ø–∞–Ω–∏–∏
campaign_stats_handler = ConversationHandler(
    entry_points=[MessageHandler(Filters.regex('^(–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏)$'), _cs_select_campaign)],
    states={
        'get_camp_stats': [MessageHandler(Filters.text, _cs_get_camp_stats)]
    },
    fallbacks=[MessageHandler(Filters.text, _cs_failback)]
)

